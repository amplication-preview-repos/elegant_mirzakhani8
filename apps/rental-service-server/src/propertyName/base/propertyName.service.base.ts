/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PropertyName as PrismaPropertyName } from "@prisma/client";

export class PropertyNameServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PropertyNameCountArgs, "select">
  ): Promise<number> {
    return this.prisma.propertyName.count(args);
  }

  async propertyNames(
    args: Prisma.PropertyNameFindManyArgs
  ): Promise<PrismaPropertyName[]> {
    return this.prisma.propertyName.findMany(args);
  }
  async propertyName(
    args: Prisma.PropertyNameFindUniqueArgs
  ): Promise<PrismaPropertyName | null> {
    return this.prisma.propertyName.findUnique(args);
  }
  async createPropertyName(
    args: Prisma.PropertyNameCreateArgs
  ): Promise<PrismaPropertyName> {
    return this.prisma.propertyName.create(args);
  }
  async updatePropertyName(
    args: Prisma.PropertyNameUpdateArgs
  ): Promise<PrismaPropertyName> {
    return this.prisma.propertyName.update(args);
  }
  async deletePropertyName(
    args: Prisma.PropertyNameDeleteArgs
  ): Promise<PrismaPropertyName> {
    return this.prisma.propertyName.delete(args);
  }
}
